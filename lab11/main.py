import matplotlib
import matplotlib.pyplot as plt
from datetime import datetime, timedelta
import telebot
import requests
import xml.dom.minidom

matplotlib.use('Agg')

bot = telebot.TeleBot('token')

CURRENCIES = {
    'USD': '–î–æ–ª–ª–∞—Ä –°–®–ê',
    'EUR': '–ï–≤—Ä–æ',
    'CNY': '–ö–∏—Ç–∞–π—Å–∫–∏–π —é–∞–Ω—å',
    'JPY': '–Ø–ø–æ–Ω—Å–∫–∞—è –∏–µ–Ω–∞',
    'TRY': '–¢—É—Ä–µ—Ü–∫–∞—è –ª–∏—Ä–∞',
    'KZT': '–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∏–π —Ç–µ–Ω–≥–µ'
}

keyboard = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
keyboard.add(*[telebot.types.KeyboardButton(name) for name in CURRENCIES.values()])


def get_rate_by_date(char_code, date_obj):
    try:
        formatted_date = date_obj.strftime('%d/%m/%Y')
        url = f'http://www.cbr.ru/scripts/XML_daily.asp?date_req={formatted_date}'
        response = requests.get(url, timeout=10)
        response.raise_for_status()

        dom = xml.dom.minidom.parseString(response.text)
        dom.normalize()

        for valute in dom.getElementsByTagName('Valute'):
            if valute.getElementsByTagName('CharCode')[0].firstChild.data == char_code:
                nominal = int(valute.getElementsByTagName('Nominal')[0].firstChild.data)
                value = float(valute.getElementsByTagName('Value')[0].firstChild.data.replace(',', '.'))
                return value / nominal
        return None
    except Exception as e:
        print(f"Error getting rate: {e}")
        return None


@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(
        message.chat.id,
        'üìä –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç –¶–ë –†–§.\n'
        '–í—ã–±–µ—Ä–∏ –≤–∞–ª—é—Ç—É –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:',
        reply_markup=keyboard
    )


@bot.message_handler(func=lambda msg: msg.text in CURRENCIES.values())
def handle_currency(message):
    currency_name = message.text
    char_code = [k for k, v in CURRENCIES.items() if v == currency_name][0]

    msg = bot.send_message(
        message.chat.id,
        f'üí± –í—ã–±—Ä–∞–Ω–∞ –≤–∞–ª—é—Ç–∞: {currency_name}\n'
        'üìÖ –í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –∏ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:'
    )
    bot.register_next_step_handler(msg, lambda m: process_dates(m, char_code))


def process_dates(message, char_code):
    try:
        bot.send_chat_action(message.chat.id, 'typing')

        if len(message.text.split()) != 2:
            raise ValueError("–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –¥–≤–µ –¥–∞—Ç—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª")

        start_str, end_str = message.text.split()
        start_date = datetime.strptime(start_str, '%d.%m.%Y')
        end_date = datetime.strptime(end_str, '%d.%m.%Y')

        if start_date > end_date:
            start_date, end_date = end_date, start_date

        if (end_date - start_date).days > 30:
            bot.send_message(message.chat.id, '‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª - 30 –¥–Ω–µ–π')
            return

        dates, rates = [], []
        current_date = start_date
        total_days = (end_date - start_date).days + 1
        progress_msg = bot.send_message(message.chat.id, '‚è≥ –°–æ–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ... 0%')

        for i in range(total_days):
            if rate := get_rate_by_date(char_code, current_date):
                dates.append(current_date)
                rates.append(rate)
            current_date += timedelta(days=1)

            if i % 3 == 0:
                bot.edit_message_text(
                    f'‚è≥ –°–æ–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ... {int((i + 1) / total_days * 100)}%',
                    message.chat.id,
                    progress_msg.message_id
                )

        if not dates:
            raise ValueError("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥")

        plt.style.use('ggplot')
        plt.figure(figsize=(10, 5))
        plt.plot(dates, rates, marker='o', linestyle='-', linewidth=2, markersize=8)
        plt.title(f'–ö—É—Ä—Å {CURRENCIES[char_code]} ({char_code})\n{start_str} - {end_str}', pad=20)
        plt.xlabel('–î–∞—Ç–∞', labelpad=15)
        plt.ylabel('–†—É–±–ª–µ–π –∑–∞ –µ–¥–∏–Ω–∏—Ü—É', labelpad=15)
        plt.xticks(rotation=45, ha='right')
        plt.tight_layout()
        plt.savefig('chart.png', dpi=120, bbox_inches='tight')
        plt.close()

        with open('chart.png', 'rb') as photo:
            bot.send_photo(message.chat.id, photo)
        bot.send_message(
            message.chat.id,
            f'üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥:\n'
            f'‚Ä¢ –ù–∞—á–∞–ª—å–Ω—ã–π –∫—É—Ä—Å: {rates[0]:.2f} —Ä—É–±.\n'
            f'‚Ä¢ –ö–æ–Ω–µ—á–Ω—ã–π –∫—É—Ä—Å: {rates[-1]:.2f} —Ä—É–±.\n'
            f'‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {rates[-1] - rates[0]:+.2f} —Ä—É–±.'
        )

        bot.delete_message(message.chat.id, progress_msg.message_id)

    except ValueError as e:
        bot.send_message(message.chat.id, f'‚ùå –û—à–∏–±–∫–∞: {str(e)}')
    except Exception as e:
        bot.send_message(message.chat.id, f'‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}')
        raise e


if __name__ == "__main__":
    bot.polling()
